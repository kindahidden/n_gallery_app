package com.elfen.ngallery.di

import android.content.Context
import androidx.room.Room
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import com.elfen.ngallery.data.local.AppDatabase
import com.elfen.ngallery.data.remote.APIService
import com.elfen.ngallery.data.repository.GalleryRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
class AppModule {
    @Provides
    @Singleton
    fun provideGalleryRepository(
        apiService: APIService,
        database: AppDatabase,
        @ApplicationContext context: Context
    ) =
        GalleryRepository(apiService, database.galleryDao(), context)

    val MIGRATION_1_2 = object : Migration(1, 2) {
        override fun migrate(db: SupportSQLiteDatabase) {
            // IMPORTANT: this code was generated by ChatGPT to save time
            //            trivial matters

            // Step 1: Create the new `download` table with nullable `progress` and `total`
            db.execSQL("""
            CREATE TABLE IF NOT EXISTS download_new (
                galleryId INTEGER PRIMARY KEY NOT NULL,
                state TEXT NOT NULL,
                progress INTEGER,
                total INTEGER
            )
            """)

            // Step 2: Copy data from the old table to the new table
            db.execSQL("""
                INSERT INTO download_new (galleryId, state, progress, total)
                SELECT galleryId, state, progress, total FROM download
            """)

            // Step 3: Drop the old table
            db.execSQL("DROP TABLE download")

            // Step 4: Rename the new table to the old table name
            db.execSQL("ALTER TABLE download_new RENAME TO download")
        }
    }

    @Singleton
    @Provides
    fun provideDatabase(@ApplicationContext context: Context) =
        Room.databaseBuilder(context, AppDatabase::class.java, "db").addMigrations(MIGRATION_1_2)
            .build()
}